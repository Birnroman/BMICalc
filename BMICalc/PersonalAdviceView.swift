
import SwiftUI

struct PersonalAdviceView: View {
  
  @State var idealWeight: (Double, Double, Double, UnitsOfWeight) = (minimum: 0.0, maximum: 0.0, yourWeight: 0.0, units: .kilograms)
  
  @State var deviation: String = ""
  
  var body: some View {
    ZStack {
      AppColors.blackBG.ignoresSafeArea()
      
      // scroll view
      ScrollView {
        // main vstack
        VStack(alignment: .leading, spacing: 28) {
          
          // recommend number vstack
          VStack(alignment: .leading, spacing: 0) {
            
            if idealWeight.3 == .kilograms {
              Text("\(String(format: "%.1f", idealWeight.0))‚Äî\(String(format: "%.1f", idealWeight.1)) –∫–≥")
                .font(.system(size: 50)).fontWeight(.semibold).foregroundStyle(Color.white)

            } else {
              Text("\(String(format: "%.1f", idealWeight.0))‚Äî\(String(format: "%.1f", idealWeight.1)) —Ñ—É–Ω—Ç–æ–≤")
                .font(.system(size: 50)).fontWeight(.semibold).foregroundStyle(Color.white)
            }
            Text("–í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å")
              .foregroundStyle(.white.opacity(0.5))

          }
          
          // recommend description text
          Text(deviation)
            .font(.title2)
            .foregroundStyle(Color.white)
          
          // three advices vstack
          VStack(spacing: 8) {
            
            HStack(alignment: .top, spacing: 20) {
              Text("ü•¶")
                .font(.title)
                .frame(width: 28)
              Text("–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–∞–ª–æ—Ä–∏–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–ª–∞–¥–æ—Å—Ç–µ–π, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–¥–∞–≤–∞—è –æ–≤–æ—â–∞–º, —Ñ—Ä—É–∫—Ç–∞–º, –Ω–µ–∂–∏—Ä–Ω—ã–º –±–µ–ª–∫–∞–º.")
            }
            .padding(.all, 16)
            .background(Color.white.opacity(0.03))
            .cornerRadius(15)
            
            HStack(alignment: .top, spacing: 20) {
              Text("üßòüèª‚Äç‚ôÄÔ∏è")
                .font(.title)
                .frame(width: 28)
              Text("–£–≤–µ–ª–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ö–æ–¥—å–±–∞, –∑–∞–Ω—è—Ç–∏—è –π–æ–≥–æ–π –∏–ª–∏ –ø–ª–∞–≤–∞–Ω–∏–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å —Å–∂–µ—á—å –ª–∏—à–Ω–∏–µ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã")
            }
            .padding(.all, 16)
            .background(Color.white.opacity(0.03))
            .cornerRadius(15)
            
            HStack(alignment: .top, spacing: 20) {
              Text("üìù")
                .font(.title)
                .frame(width: 28)
              Text("–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π, –∏–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–∏—â–µ–≤—ã–º —Ä–∞—Ü–∏–æ–Ω–æ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏")
            }
            .padding(.all, 16)
            .background(Color.white.opacity(0.03))

            .cornerRadius(15)
          }
          .foregroundColor(.white)
          
          
          // tableIMT
          VStack(alignment: .leading, spacing: 20) {
            Text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò–ú–¢:")
              .font(.title2).fontWeight(.semibold)
            
            VStack(spacing: 16) {
              CategoriesItemView(range: "< 18.5", color: AppColors.redBG)
              Divider().background(Color.white.opacity(0.4))
              CategoriesItemView(range: "18.5‚Äî24.8", decription: "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å", color: AppColors.greenBG)
              Divider().background(Color.white.opacity(0.4))
              CategoriesItemView(range: "24.9‚Äî29.8", decription: "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å", color: AppColors.lettucegreenBG)
              Divider().background(Color.white.opacity(0.4))
              CategoriesItemView(range: "29.9‚Äî34.8", decription: "–û–∂–∏—Ä–µ–Ω–∏–µ I —Å—Ç–µ–ø–µ–Ω–∏", color: AppColors.yellowBG)
              Divider().background(Color.white.opacity(0.4))
              CategoriesItemView(range: "34.9‚Äî39.8", decription: "–û–∂–∏—Ä–µ–Ω–∏–µ II —Å—Ç–µ–ø–µ–Ω–∏", color: AppColors.orangeBG)
              Divider().background(Color.white.opacity(0.4))
              CategoriesItemView(range: "> 39.8", decription: "–û–∂–∏—Ä–µ–Ω–∏–µ III —Å—Ç–µ–ø–µ–Ω–∏", color: AppColors.redBG)
            }
          }
          .foregroundColor(.white)

          
        }
        .padding()
      }
      .onAppear {
        deviation = calculateDeviation(minimum: idealWeight.0, maximum: idealWeight.1, weight: idealWeight.2, units: idealWeight.3)
      }
      
    }
  }

  func calculateDeviation(minimum: Double, maximum: Double, weight: Double, units: UnitsOfWeight) -> String {
    var delta: Double = 0.0
    var description: String = ""
    
    if weight < minimum {
      delta = minimum - weight
      description = "–ù–∞–±—Ä–∞—Ç—å \(String(format: "%.0f", delta)) \(units == .kilograms ? "–∫–≥" : "—Ñ—É–Ω—Ç–æ–≤") –º–æ–∂–Ω–æ, –µ—Å–ª–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:"
    } else if weight > maximum {
      delta = weight - maximum
      description = "–°–±—Ä–æ—Å–∏—Ç—å \(String(format: "%.0f", delta)) \(units == .kilograms ? "–∫–≥" : "—Ñ—É–Ω—Ç–æ–≤") –º–æ–∂–Ω–æ, –µ—Å–ª–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:"
    } else if weight >= minimum && weight <= maximum {
      description = "–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:"
    }
    
    return description
    
  }
}

struct Category {
  let name: String
  let minimum: Double
  let maximum: Double
  
}

struct CategoriesItemView: View {
  
  @State var range: String = "< 18,5"
  @State var decription: String = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Å–∞"
  @State var color: Color = .gray
  
  var body: some View {
    HStack {
      HStack(spacing: 0) {
        Text(range)
          .frame(width: 100, alignment: .leading)
          .foregroundColor(.white.opacity(0.6))
        Text(decription)
          .fontWeight(.medium)
      }
      
      Spacer()
      Circle().frame(width: 10)
        .foregroundColor(color)
    }
  }
}

#Preview {
  PersonalAdviceView()
}

//#Preview {
//  CategoriesItemView()
//}
